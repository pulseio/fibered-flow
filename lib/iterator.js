// Generated by CoffeeScript 1.3.3
(function() {
  var Future, Iterator, util,
    __slice = [].slice;

  Future = require('fibers/future');

  util = require('util');

  module.exports = Iterator = (function() {

    function Iterator(values, options) {
      this.values = values;
      this.options = options != null ? options : {};
    }

    Iterator.prototype.futurize = function() {
      var args, fn, future,
        _this = this;
      fn = arguments[0], args = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
      future = new Future();
      Fiber(function() {
        return future["return"](fn.apply(null, args));
      }).run();
      return future;
    };

    Iterator.prototype.map = function(fn) {
      var f, futures, i, v;
      futures = (function() {
        var _i, _len, _ref, _results;
        _ref = this.values;
        _results = [];
        for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
          v = _ref[i];
          _results.push(this.futurize(fn, v, i));
        }
        return _results;
      }).call(this);
      return new Iterator((function() {
        var _i, _len, _results;
        _results = [];
        for (_i = 0, _len = futures.length; _i < _len; _i++) {
          f = futures[_i];
          _results.push(f.wait());
        }
        return _results;
      })());
    };

    Iterator.prototype.each = function(fn) {
      var f, futures, i, v, _i, _len;
      futures = (function() {
        var _i, _len, _ref, _results;
        _ref = this.values;
        _results = [];
        for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
          v = _ref[i];
          _results.push(this.futurize(fn, v, i));
        }
        return _results;
      }).call(this);
      for (_i = 0, _len = futures.length; _i < _len; _i++) {
        f = futures[_i];
        f.wait();
      }
      return this;
    };

    Iterator.prototype.first = function(fn, first) {
      var f, fibers, futures, i, results, v, _fn, _i, _len, _ref;
      if (first == null) {
        first = 1;
      }
      futures = (function() {
        var _i, _results;
        _results = [];
        for (f = _i = 0; 0 <= first ? _i < first : _i > first; f = 0 <= first ? ++_i : --_i) {
          _results.push(new Future());
        }
        return _results;
      })();
      fibers = [];
      _ref = this.values;
      _fn = function(v, i) {
        var fiber;
        fiber = Fiber(function() {
          var res, _j, _len1, _results;
          res = fn(v, i);
          _results = [];
          for (_j = 0, _len1 = futures.length; _j < _len1; _j++) {
            f = futures[_j];
            if (!f.isResolved()) {
              f["return"](res);
              break;
            } else {
              _results.push(void 0);
            }
          }
          return _results;
        });
        fiber.run();
        return fibers.push(fiber);
      };
      for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
        v = _ref[i];
        _fn(v, i);
      }
      results = (function() {
        var _j, _results;
        _results = [];
        for (i = _j = 0; 0 <= first ? _j < first : _j > first; i = 0 <= first ? ++_j : --_j) {
          _results.push(futures[i].wait());
        }
        return _results;
      })();
      return new Iterator(results);
    };

    Iterator.prototype.toA = function() {
      return this.values;
    };

    return Iterator;

  })();

}).call(this);
